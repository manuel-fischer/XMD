@syn* ```python3 xmd.py [<cwd>]```

@todo
	* `@syn` command should strip empty lines at the beginning and end
	* A way to force that an entity is inlined in the current entity

@opt <cwd> 
	@briefx The current working directory, it might be the github repository.
	@default `'./'`

@type[implementation details] wref
	@brief Alias for weakref.ref

@fn[implementation details] deref(w : wref['T']) -> 'T':
	@briefx Dereferences a weak reference

@const LANG
	@briefx The language that is used in generated markdown.
	@todo
		should be configurable through a command like `@lang` or 
		should be determined by the inner file extension: like `.py`
		in `xmd.py.xmd`

@class[structure] Entity
	@brief Source code entity.
	A named tuple containing information about the entities in the source code.
	
	@attr type The type of the entity.
	@attr category A user defined category.
		It is `None` if it does not belong to any category.
		@example
			`@fn[Observers] get`
	@attr brief The text that appears in overviews next to the name.
	@attr display The displayed title of the entity.
	@attr sections The contents of special sections. See SPECIAL_SECTIONS.
	@attr childs A list containing all child entities of the entity.
	@attr location A string that identifies the output filename of the entity
		@syn location = "<filename.md>[#section]"
		A string that identifies the output filename of the entity
		relative to `doc/`.

		@todo
			Implement sections, when the entity is not the root element of
			a markdown file, currently its `None` in this case.
	@attr src_location The input location: `("<filename.xmd>", <line>)`
	@attr prev A weakpointer referring to the previous entity or None. Set by `realize_filestructure` 
	@attr prev A weakpointer referring to the next entity or None. Set by `realize_filestructure`

	
@class[structure] EntityType
	@briefx The behavior of a source code entity.
	
	@attr title The title shown at the top of a section.
	@attr inline_brief The text after the first token is parsed as the brief text, instead of the part of a signature.

@const HEADER_SIGNATURE Parse a tag header as a function/macro signature.
@const HEADER_BRIEF Parse a tag header as an identifier followed by a brief description.
@const HEADER_TITLE Parse a tag header as the title

@const[structure] ENTITY_WORDS
	@brief A dictionary containing all entity types, their section title and their signature behavior.
@const[structure] SECTION_ORDER
	@brief A array containing all entity types and section names.
	
@const[structure] SPECIAL_SECTIONS
	@briefx The names and their section heading of special sections as a dictionary.
	Special sections: synopsis, description, return, example.
			
	The synopsis and description sections appear at the top.
	The return section appears where retval appears.

@const[commands] COMMANDS
	@briefx A dictionary mapping from command names to command functions

	It is populated by the `command` decorator.

@fn[commands] command
	@syn @command(name="<name>")
		def cmd_<name>(e : entity, content : str):
			...
	@briefx Decorator, that registers a command in `COMMANDS`.
	@param name The name of the command.
	@param func
		@syn cmd_<name>(e : entity, content : str)
		@briefx The function that should be registered with the given command name.
		@param e The current entity (the context) on which the command is applied to.
		@param content 
			@brief The contents of the command, might be multiple lines if
				the introducing line is followed by indented lines.
		@return The return value is discarded.


@cmd[commands] cmd_brief
	@brief Implementation for the `@brief` command

@cmd[commands] cmd_briefx
	@brief Implementation for the `@briefx` command

@cmd[commands] cmd_disp
	@brief Implementation for the `@disp` command

@const[parsing] INDENT_WIDTH
	@brief The expected indent (width in spaces) of the text inside an entity.
	
@class[parsing] Token
	@briefx A token with its position.
	
	@attr pos The position in the string it originated from.
	@attr text The content of the token.
	
@fn[parsing] split_tokens(txt)
	A function that splits source code into its tokens.
	
	@param txt The source code that should be tokenized.
	@return It returns a list of strings, each of them is a token.
	
@fn[parsing] text_slice(tokens, index, end=None)
	Creates slice for extracting the text over the specified range of tokens.
	
	@param tokens The tokens.
	@param index The first index of the token sequence.
	@param end The first index of the token not in the sequence.
	
@const[markdown] ANCHOR_CHARS
	@brief Characters in a markdown anchor.
	
	These are the characters that are kept in the resulting link to a markdown section,
	which is generated out of the title text itself.
	Note that spaces are replaced by a hyphen later.
	
@fn[markdown] to_md_anchor(txt)
	@brief Convert title to markdown anchor.
	Converts the title of a section to the anchor, which can be used in a markdown link.
	
	@param txt A string containing the title text of the section to generate the anchor for, it should not contain any spaces.
	@return A string that represents the anchor.
	
@fn[markdown] to_md_filename_part(name)
	@briefx Convert file title to a filename.
	@param name The file title.
	@return The corresponding part of the filename.
	
@fn[output] correct_grammar(string, amount)
	@brief Adjusts the string to a given amount.
	
	Adjusts the string to the given amount, when the amount is one, all plural letters get removed.
	These are identified by "(...)" at the end of string. Otherwise, the parenthesis get removed.
	
	@param string The string containing parenthesized plural form.
	@param amount The amount to adjust the string to.
	@return The adjusted string.
	
@fn[parsing] signature2display(signature)
	@briefx Extracts the displayed identifier out of a signature.
	@param signature The signature as a string.
	@return the identifier.
	@example
		```python
		>>> signature2display("int main(int argc, char* argv[])")
		'main'
		```

@fn[structure] entity_has_subfile(entity)
	@brief Checks if the entity has detailed content.
	Checks if the entity has more detailed content than just the brief description.
	@param entity The entity.
	@return A boolean flag that determines if the entity has more in depth content.
	
@fn[parsing] dedent(line)
	Tries to dedent a line.

	@param line The line to be dedented.
	@return If it succedes it returns the dedented line, otherwise `None`.

@fn[parsing] parse_block(lines)
	Gets the contents of the next indented block.
	
	@param lines A list of strings containing all the lines.
	@retval block A list of strings containing the dedented lines of the block.
	@retval rest A list containing the rest of the lines, that do not belong to the block.


@fn[parsing] first_group(tokens, start=0)
	@briefx Find the next opening or closing grouping token.
	@param tokens A list of `Token`s.
	@param start The starting postion of the search.
	@return Index of the first token that is a grouping token,
		if no grouping token is found return `None`.


@fn[parsing] parse_group(tokens, start=0, group="[]")
	Parse a group that is delimited by group. Nested groups are handled correctly.
	@param tokens A list of tokens.
	@param start The index of the token that is potentially a group delimiter.
	@param group Both delimiting characters.
	@retval first The first token inside of the group.
	@retval last  The first token not inside of the group (could be delimiter).
	@retval rest  The first token after the group.
	

@fn[markdown] pack_code(code)
	@brief Format `code` as a multiline codeblock.
	
@fn[parsing] parse_xmd(xmd_lines, e : Entity, line_no=1)
	Parses xmd source recursively and collects all subentities and text.
	
	@param xmd_lines A list of strings containing the lines of the xmd source.
	@param e The entity with initial information.
	@param line_no The line number of the first line of the entity.
	@return An `Entity` that contains the parsed contents.
	
@const[output] LONG_LINE A horizontal line used before brief descriptions.
@const[output] SPLIT_LINE A vertical line used in between links of the browse line.
@const[output] LARGE_SPACE A string that is inserted where larger spaces should appear.
@const[output] DIRECTION_STR The arrow characters for all four directions.
	
@fn[string operations] str_join_nonempty(join_string, l)
	@briefx Join strings that are not empty.
	@param join_string The string between the nonempty strings.
	@param l An iterable of all the strings to be joined.
	@return The joined string. If an empty string appears between other ones, `join_string` is only inserted once.
	
@fn[output] generate_browse_link(direction, file_entity)
	@briefx Generates the correponding link for the browse line.
	@param direction The direction in the hierarchy in which the link points to.
	@param file_entity An `Entity` or `None` identifying the file.
	@return The markdown link for the browse line.
	
@fn[output] generate_browse(parent, files, i)
	@briefx Generates the browse line.
	@param parent An `Entity` or `None` identifying the parent file.
	@param file_entity
		@briefx An `Entity` that identifies the current file.
		To generate the links properly it should have `prev` and `next`
		set accordingly (by `realize_filestructure`).

@fn[structure] realize_filestructure(xmd_entity : Entity, filename : str, depth=999, section_depth=1)
	@briefx Sets the filename information of the `xmd_entity` and its
		subentities recursively.

	@param xmd_entity The root entity.
	@param filename
		@briefx The expected filename of the generated markdown file to that entity.
		It might be overridden by the `@location` command
		@todo implement `@location command`
	@param depth The rest depth, in which the subentities are separated into their own files.
	@param section_depth The depth/count of `#` when creating section headers.


@fn[output] xmd2md(xmd_entity, parent_file, depth=999, section_depth=1)
	Creates recursively the markdown text for the xmd_entity and its subentities.
	
	@param xmd_entity The `Entity` object.
	@param parent_file A tuple identifying the parent file: `(filename, display, *)`.
	@param depth The rest depth, in which the subentities are separated into their own files.
	@param section_depth The depth/count of `#` when creating section headers.
	@return A dictionary containing the contents for the markdown files with its relative filename.
	
@fn[file management] read_file(fname)
	@briefx Read the contents of a text file.
	The filename is echoed to `stdout`.
	@param fname The path of the text file.
	@return The contents of the text file as a string.
	
@fn[file management] write_file(fname, s)
	@briefx Write the contents of a string to a text file.
	The filename is echoed to `stdout`.
	@param fname The path of the text file.
	@param s The new contents to be written to the file
	@return None.
	@sidefx Writes to the file and generates the directory containing the file, if it does not exist.
	
@fn[file management] delete_file(fname):
	@briefx Delete a (text) file.
	The filename is echoed to `stdout`.
	@param fname The path of the text file.
	@return None.
	@sidefx Deletes the file.
	
@fn parse_xmd_file(cwd, ifile)
	@briefx Parse the `.xmd` file named by `ifile`.
	@param cwd The directory in which there is a file named `ifile`.
	@param ifile The relative path of the `.xmd` file to be parsed.
	@return The root `Entity`.

@fn generate_md_files(cwd, root, entity)
	@briefx Generate and write out 

@fn generate_md_files(cwd, root, entity)
	@briefx Generate and write out all the files corresponding to an `Entity` and its subentities.
	@param cwd The current working directory, it might be the github repository.
	@param root The parent `Entity` or `None`.
	@param entity The entity to generate the markdown files for.
	@return None.
	@sidefx Writes to all `md` files that are generated from `entity`.
	
@fn process_doc(cwd)
	@briefx Create the markdown documentation in `doc/` from the `xmd` files in `xdoc/`.
	@param cwd The current working directory, it might be the github repository.
	@return None.
	@sidefx Deletes files that existed in the `doc/` directory and writes the new contents of `md` files. If the `doc/` dir does not exist, the directory is created.
	