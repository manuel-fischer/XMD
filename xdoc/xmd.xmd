@const LANG
	@brief The language that is used in generated markdown.

@class Entity
	@brief Source code entity.
	A named tuple containing information about the entities in the source code.
	
	@attr type The type of the entity.
	@attr category A user defined category.
		It is `None` if it does not belong to any category.
		@example
			`@fn[Observers] get`
	@attr brief The text that appears in overviews next to the name.
	@attr display The displayed title of the entity.
	@attr sections Special sections: synopsis, description, return.
		The synopsis and description sections appear at the top.
		The return section appears where retval appears.
	@attr childs A list containing all child entities of the entity.
	
@class[structure] EntityType
	@briefx The behavior of a source code entity.
	
	@attr title The title shown at the top of a section.
	@attr inline_brief The text after the first token is parsed as the brief text, instead of the part of a signature.
	
@const[structure] ENTITY_WORDS
	@brief A dictionary containing all entity types, their section title and their signature behavior.
@const[structure] SECTION_ORDER
	@brief A array containing all entity types and section names.
	
@const[structure] SPECIAL_SECTIONS
	@briefx The names and their section heading of special sections as a dictionary.
	
	
	
@const[parsing] INDENT_WIDTH
	@brief The expected indent (width in spaces) of the text inside an entity.
	
@class[parsing] Token
	@briefx A token with its position.
	
	@attr pos The position in the string it originated from.
	@attr text The content of the token.
	
@fn[parsing] split_tokens(txt)
	A function that splits source code into its tokens.
	
	@param txt The source code that should be tokenized.
	@return It returns a list of strings, each of them is a token.
	
@fn[parsing] text_slice(tokens, index, end=None)
	Creates slice for extracting the text over the specified range of tokens.
	
	@param tokens The tokens.
	@param index The first index of the token sequence.
	@param end The first index of the token not in the sequence.
	
@const ANCHOR_CHARS
	@brief Characters in a markdown anchor.
	
	These are the characters that are kept in the resulting link to a markdown section,
	which is generated out of the title text itself.
	Note that spaces are replaced by a hyphen later.
	
@fn to_md_anchor(txt)
	@brief Convert title to markdown anchor.
	Converts the title of a section to the anchor, which can be used in a markdown link.
	
	@param txt A string containing the title text of the section to generate the anchor for, it should not contain any spaces.
	@return A string that represents the anchor.
	
@fn to_md_filename_part(name)
	@briefx Convert file title to a filename.
	@param name The file title.
	@return The corresponding part of the filename.
	
@fn correct_grammar(string, amount)
	@brief Adjusts the string to a given amount.
	
	Adjusts the string to the given amount, when the amount is one, all plural letters get removed.
	These are identified by "(...)" at the end of string. Otherwise, the parenthesis get removed.
	
	@param string The string containing parenthesized plural form.
	@param amount The amount to adjust the string to.
	@return The adjusted string.
	
@fn signature2display(signature)
	@briefx Extracts the displayed identifier out of a signature.
	@param signature The signature as a string.
	@return the identifier.

@fn entity_has_subfile(entity)
	@brief Checks if the entity has detailed content.
	Checks if the entity has more detailed content than just the brief description.
	@param entity The entity.
	@return A boolean flag that determines if the entity has more in depth content.
	
@fn[parsing] dedent(line)
	Tries to dedent a line.

	@param line The line to be dedented.
	@return If it succedes it returns the dedented line, otherwise `None`.

@fn[parsing] parse_block(lines)
	Gets the contents of the next indented block.
	
	@param lines A list of strings containing all the lines.
	@retval block A list of strings containing the dedented lines of the block.
	@retval rest A list containing the rest of the lines, that do not belong to the block.
	
@fn[parsing] parse_group(tokens, start, group)
	Parse a group that is delimited by group. Nested groups are handled correctly.
	@param tokens A list of tokens.
	@param start The index of the token that is potentially a group delimiter.
	@param group Both delimiting characters.
	@retval first The first token inside of the group.
	@retval last  The first token not inside of the group (could be delimiter).
	@retval rest  The first token after the group.
	
	
@fn[parsing] parse_xmd(xmd_lines)
	Parses xmd source recursively and collects all subentities and text.
	
	@param xmd_lines A list of strings containing the lines of the xmd source.
	@return An `Entity` that contains the parsed contents.
	
@const[output] LONG_LINE A horizontal line used before brief descriptions.
@const[output] SPLIT_LINE A vertical line used in between links of the browse line.
@const[output] DIRECTION_STR The arrow characters for all four directions.
	
@fn[string operations] str_join_nonempty(join_string, l)
	@briefx Join strings that are not empty.
	@param join_string The string between the nonempty strings.
	@return The joined string.
	
@fn[output] generate_browse_link(direction, file)
	@briefx Generates the correponding link for the browse line.
	@param direction The direction in the hierarchy in which the link points to.
	@param file A tuple identifying the file: `(filename, display, *)`.
	@return The link for the browse line.
	
@fn[output] generate_browse(parent, files, i)
	@briefx Generates the browse line.
	@param parent A tuple identifying the parent file: `(filename, display, *)`.
	@param files A list of file tuples in the current level of the hierarchy: `[(filename, display, *)...]`.
	@param i The index of the current file in `files`.
	
@fn[output] xmd2md(xmd_entity, parent_file, files, file_index, depth=999, section_depth=1)
	Creates recursively the markdown text for the xmd_entity and its subentities.
	
	@param xmd_entity The `Entity` object.
	@param parent_file A tuple identifying the parent file: `(filename, display, *)`.
	@param files A list of file tuples in the current level of the hierarchy: `[(filename, display, *)...]`.
	@param file_index The index of the current file in `files`.
	@param depth The rest depths, in which the subentities are separated into its own files.
	@param section_depth The depth/count of `#` when creating section headers.
	@return A dictionary containing the contents for the markdown files with its relative filename.
	
@fn[file management] read_file(fname)
	@briefx Read the contents of a text file.
	The filename is echoed to `stdout`.
	@param fname The path of the text file.
	@return The contents of the text file as a string.
	
@fn[file management] write_file(fname, s)
	@briefx Write the contents of a string to a text file.
	The filename is echoed to `stdout`.
	@param fname The path of the text file.
	@param s The new contents to be written to the file
	@return None.
	
@fn[file management] delete_file(fname):
	@briefx Delete a (text) file.
	The filename is echoed to `stdout`.
	@param fname The path of the text file.
	@return None.

	